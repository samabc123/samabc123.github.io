<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS浮动</title>
      <link href="/archives/cb4474fe.html"/>
      <url>/archives/cb4474fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-添加浮动"><a href="#1-添加浮动" class="headerlink" title="1.添加浮动"></a>1.添加浮动</h1><p>CSS大体上有三种基本的定位机制：<font color="red">标准流，浮动，定位</font></p><p>首先我们知道<code>div</code>是块级标签，自带一个换行，也就是说它在页面独占一行，自上而下排列，也就是传说中的 <em>标准流</em>（指文档内元素的流动方向。内联元素从左到右，遇到阻碍换行执行;块级元素独占一行，从上往下排列。）<br><em>标准流</em> 又被称为“文档流”或“普通流”。</p><p><img src="/img/CSS/one.png"></p><p>从图中不难看出即使div1和div2宽度完全可以在一行内承载得下，但div2也不会排在div1后面，这就是标准流中的div。</p><p>如果<strong>想要多个div排列在同一行内</strong>，显然标准流是无法实现的，这就需要 <em>浮动</em> 来完成了。浮动可以理解为是该元素脱离标准流，漂浮在标准流上面。<br>例如：将div2添加左浮动，就会发现div3变矮了，其实是div2脱离了标准流，div1，div3，div4还在标准流里，所以他们自上而下依次排列，div3向上移动占据了div2的位置，重新形成了一个标准流。</p><p><img src="/img/CSS/two.png"></p><p><strong>如果把div2，div3都设置右浮动呢</strong></p><p><img src="/img/CSS/three.png"></p><p>同理，div2，div3浮动，不在属于标准流，div4会向上移动与div1重新形成一个标准流，由于设置的是右浮动，页面右边为头，所以从左往右来说 div2会排列在div3后面。</p><p>在这两个例子中我们不难发现，div2都设置了浮动，但是并没有直接在div1后面排列，而是在div1下面。所以我们得出结论：<font size=4><strong>如果某个div元素A设置浮动，该元素的上一个元素B也是浮动的，那么A会跟在B后面显示，如果该元素的上一个元素C是标准流，那么A的顶部总是与C的底部对齐。</strong></font></p><h1 id="2-清除浮动"><a href="#2-清除浮动" class="headerlink" title="2.清除浮动"></a>2.清除浮动</h1><p>我们在使用浮动的时候难免会出现 <strong>“ 浮动溢出 “</strong> 的现象，因为我们在开发过程中无法得知子元素的高度，所以没有办法给父元素设置一个固定准确的高度，当子元素设置浮动时，父元素的高度会出现坍塌的效果，所以我们需要清除浮动。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.parent</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aqua;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/CSS/four.png"></p><p>清除浮动最常用的四种方法：</p><ul><li>额外标签：谁需要清除浮动就在该元素后面添加一个空白标签，属性设置为：<code>clear:both</code><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear: both;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/img/CSS/five.png"></p><ul><li>父元素添加<code>overflow:hidden</code></li><li>父元素设置高度</li><li>建立伪类选择器清除浮动</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">            <span class="comment">/* 设置添加子元素的内容是空 */</span></span><br><span class="line">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="comment">/* 设置添加子元素为块级元素 */</span></span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="comment">/* 设置添加的子元素的高度0 */</span></span><br><span class="line">            <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="comment">/* 设置添加子元素看不见 */</span></span><br><span class="line">            <span class="attribute">visibility</span>: hidden;</span><br><span class="line">            <span class="comment">/* 设置clear：both */</span></span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寒假学习 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise理解</title>
      <link href="/archives/3936fdc1.html"/>
      <url>/archives/3936fdc1.html</url>
      
        <content type="html"><![CDATA[<h1 id="Promise含义"><a href="#Promise含义" class="headerlink" title="Promise含义"></a>Promise含义</h1><p>语法上来说，<code>Promise</code>是一个对象，它代表了一个<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing">异步操作</a>的最终完成或者失败。所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。</p><h1 id="Promise用法"><a href="#Promise用法" class="headerlink" title="Promise用法"></a>Promise用法</h1><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><ol>    <li>待定（pending）：初始状态，既没有成功，也没有失败。</li>    <li>已处理（fulfilled）：意味着操作成功完成。</li>    <li>已拒绝（rejected）：意味着操作失败。</li></ol><p><code>Promise</code>对象的三种状态不受外界影响，状态改变只有两种情况：pending -&gt; fulfilled(已处理) &#x2F; rejected(已拒绝)。任意一种情况发生时，通过 <code>Promise</code>的 <code>then</code> 方法的处理程序将被调用。如果一个 <code>Promise</code> 已经成功或拒绝，那么则称之为已敲定(settled)，<strong>就是不会再变化了，将一直保持该状态</strong>。<br>基本用法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建Promise对象：</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// 异步操作</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理fulfilled状态</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理rejected状态</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理fulfilled状态</span></span><br><span class="line">  <span class="keyword">return</span> value2;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">value2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理fulfilled状态</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理rejected状态</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Promise</code>链式反应：链中每个已兑现的 <code>Promise</code> 的返回值会传递给下一个<code>.then()</code>，而已拒绝的 <code>Promise</code> 会把失败原因传递给链中下一个拒绝处理函数。</p><h1 id="Promise并发"><a href="#Promise并发" class="headerlink" title="Promise并发"></a>Promise并发</h1><p><code>Promise</code> 类提供了四个静态方法来促进异步任务的并发：</p><table><thead><tr><th align="center">方法</th><th align="center">简介</th></tr></thead><tbody><tr><td align="center">Promise.all().</td><td align="center">在所有传入的 Promise 都被兑现时兑现；在任意一个 Promise 被拒绝时拒绝。</td></tr><tr><td align="center">Promise.allSettled().</td><td align="center">在所有的 Promise 都被敲定时兑现。</td></tr><tr><td align="center">Promise.any().</td><td align="center">在任意一个 Promise 被兑现时兑现；仅在所有的 Promise 都被拒绝时才会拒绝。</td></tr><tr><td align="center">Promise.race().</td><td align="center">在任意一个 Promise 被兑现时兑现；在任意一个的 Promise 被拒绝时拒绝。</td></tr></tbody></table><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()."></a>Promise.all().</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;成功了&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"><span class="keyword">let</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;) <span class="comment">// 打印 [&#x27;成功了‘,&#x27;success&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p3, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;) <span class="comment">// 打印 &#x27;失败&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()."></a>Promise.race().</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(resolve, <span class="number">500</span>, <span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(resolve, <span class="number">100</span>, <span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> <span class="title class_">Promise</span>.<span class="title function_">race</span>([promise1, promise2]).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">       <span class="comment">// 都resolve, 但是promise2更快 打印‘two’</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h1><h2 id="Promise解决了什么问题？"><a href="#Promise解决了什么问题？" class="headerlink" title="Promise解决了什么问题？"></a>Promise解决了什么问题？</h2><p><code>Promise</code>解决了回调地狱的问题。在以前的JavaScript代码中，多个异步操作嵌套过深，难以维护和理解，这就是所谓的回调地狱。而<code>Promise</code>可以让异步操作按照顺序执行，并且可以链式调用，使得代码更加清晰和易于管理。同时，<code>Promise</code>还可以处理异步操作的成功和失败，使得错误处理更加方便。</p><h2 id="setTimeout、Promise、Async-Await-的区别？"><a href="#setTimeout、Promise、Async-Await-的区别？" class="headerlink" title="setTimeout、Promise、Async&#x2F;Await 的区别？"></a>setTimeout、Promise、Async&#x2F;Await 的区别？</h2><ul><li><code>settimeout</code><br>它的回调函数放到宏任务队列里，等到执行栈清空以后执行</li><li><code>Promise</code><br>它本身是同步的立即执行函数，当在<code>executor</code>中执行resolve或者reject的时候，此时是异步操作，会先执行then&#x2F;catch等，当主栈完成后，才会去调用resolve&#x2F;reject中存放的方法执行。</li><li>&#96;&#96;Async&#x2F;Await<code>它们返回一个</code>Promise<code>对象，当函数执行的时候，一旦遇到 </code>await<code>就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了</code>async&#96; 函数体。</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 寒假学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 寒假学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/archives/b8f4bd70.html"/>
      <url>/archives/b8f4bd70.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo博客搭建简易教程"><a href="#Hexo博客搭建简易教程" class="headerlink" title="Hexo博客搭建简易教程"></a>Hexo博客搭建简易教程</h1><p>这几天花了一些时间来搭建了一个博客！<br>其实现在市场有很多写博客的平台，例如<code>CSDN，Stackoverflow</code>，博客园等平台，可以在上面使用<code>markdown</code>或者富文本编译器直接书写并发表自己的文章，所有人都可以访问到，而且用户交互设计也做得非常好。但是有一些缺点是无法自由书写 ( 会受到一些 “限制” )。<br>那么就有人想说自己部署一个博客呗，啊？自己购买域名和服务器，成本真的很高，而且还需要定期维护，时间成本也很高，这也就是为什么我一直没有搭建自己博客的部分原因。直到我前几天看到了一个快速简洁的博客框架—-<code>hexo</code>，用它来搭建博客将会非常容易，再将自己的博客上传到<code>github</code>上进行托管，不仅解决了成本问题，还不需要定期维护！！！</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>    <li> <strong>Git,Node.js的安装</strong> <br> Git安装可以看一下我的另一篇博客：<a href="https://blog.csdn.net/m0_73593563/article/details/132156744?spm=1001.2014.3001.5502"> Windows下Git相关介绍以及常用命令 </a>     </li>    <li> <strong>Hexo安装</strong> <br> <p>由本人使用的windows系统，这里有且只介绍windows系统下的方法。<br> win+R输入cmd使用管理员方式打开终端命令行</p>    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全局安装hexo</span></span><br><span class="line">npm i hexo -g</span><br></pre></td></tr></table></figure>    </li>    <li> <strong>初始化博客</strong> <br>    <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">hexo init 文件夹名字</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm i</span><br><span class="line"><span class="comment">#预览运行博客</span></span><br><span class="line">hexo serve</span><br></pre></td></tr></table></figure>    </li></ul><h2 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到<code>Github</code></h2><p>目前搭建好的博客只可以在自己的电脑上面访问，并且需要项目一直在运行状态。所以这里我们可以将搭建好的博客上传到<code>github</code>上，利用<code>github</code>上配置服务使所有人都可以通过一个链接来访问自己的博客！</p><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建<code>Github</code>仓库</h3><p>首先没有<code>Github</code>账户的先去注册一个~<br>进入首页之后，点击<code>New repository</code> 新建仓库。</p><p><img src="/img/Blog/one.png"></p><p>创建一个和你用户名相同的仓库，后面加 .github.io，只有这样，将来要部署到 GitHub page 的时候，才会被识别，对于下面这个页面也就是在里边<code>Repository name</code>写samabc123.github.io，这里要注意一定要选择 Public 这样你的博客别人才可以访问到。</p><img src="/img/Blog/two.png" style="width: 70%"><p>点击<code>create repository</code>。</p><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到<code>Github</code></h3><p>打开你创建的博客文件夹，打开<code>_config.yml</code>配置文件，翻到最后一行添加以下代码。repo里边就是就创建仓库的地址链接。</p><p><img src="/img/Blog/three.png"></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/***/***.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>部署之前需要安装<code>hexo-deployer-git</code>插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后依次运行下面代码:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="comment"># 清除了你之前生成的东西，建议每次运行都加上</span></span><br><span class="line">hexo g <span class="comment"># 生成静态文章</span></span><br><span class="line">hexo d <span class="comment"># 部署文章</span></span><br></pre></td></tr></table></figure><p>第一次关联Github可能会需要输入你的账户和密码，输入即可，出现以下类似界面代表部署成功~<br><code>http://***.github.io</code> 就可以看见你的博客了！！！</p><p><img src="/img/Blog/last.png"></p><p>写文章可能需要markdown语法，详情可以看我的另一篇博客 </p>]]></content>
      
      
      <categories>
          
          <category> Blog搭建美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/undefined.html"/>
      <url>/archives/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><ul>    <li>1</li>    <li>2</li>    <li>3</li></ul><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
